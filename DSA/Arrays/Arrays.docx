Arrays
    1.  Definition: Linear collection of same type of elements that are stored together in contiguous memory spaces.

    2.  Creating an Array
        ->  int marks[50];              //garbage values at the indices.
        ->  int marks[50] = {1,2,3};    //other indices are initialized with 0 as a value.
        ->  int marks[] = {1,2,3};  

        ->  Memory is statistically allocated (at compile time)

        -> cout<<sizeOf(marks)      //returns no. of bits the array in total occupies.

    3.  Arrays are passed by reference
        ->  void printArr(int arr[]){....} and,
            void printArr(int *arr){....}

            are same.

        ->  Reason: C++ array name is pointer.

    4.  Create a function which takes an array as one of the input and prints the elements of the array.
        ->  Did you experienced something weird?
        ->  It's your job find out why is it.

    5.  Space and Time Complexity
        ->  General overview
    
    6.  Reverse an Array
        ->  There are two ways to reverse an Array
            i.      with extra spaces
            ii.     w/o exttra spaces

    7.  Sorting an Array
        i.      Linear Search
        ii.     Binary Search
                ->  criteria:   sorted array

    8.  Array Pointer
        ->  Array pointer acts like a constant pointer.
        ->  Pointer arithmetic:
            i.      Increment or Decrement Operators
                        ptr++ or ++ptr 
                        ptr-- or --ptr
            ii.     Addition and Subtraction of Constants
                        ptr + 3 //ptr + 3*datatype
                        ptr - 3 //ptr - 3*datatype
            iii.    Addition and Subtraction of Pointers
                        ptr1 + ptr2 //invalid operation
                        ptr1 - ptr2 //both should be of same type
            iv.     Comparison of two pointers (==, <, <=, >, >=)

    9.  Classical Questions on Arrays:

        i.      Print Subarrays:
                    ->  Subarray is continuous part of an array.

                    ->  Subarray vs Subsequence:
                        ->  non-continuous part of an array.
                        ->  but follows order of the array.

                    ->  Interview Tip:  
                        ->  Learn the concepts of array as approach to a problem.
                        ->  Apply the concepts and approach of array problems to string and vector problems with minor modifications.

                    ->  For an array of n-elements, the no. of subarrays possible = n(n-1) / 2.

        ii.     Max Subarray Sum:
                    ->  Return the sum of elements of the subarray whose elements makes it to the highest sum among the other subarrays of the original array.
                    ->  Max subarray sum of an array whose all elements are positive is the sum of the array itself.
                    ->  Above not true for an array containing negative elements.
                    ->  There are three ways to solve this problem: 
                        a.  Brute-force, 
                        b.  Slightly optimized, and 
                        c.  Kadane's approach (best approach).

                    ->  Note:   INT_MIN means -infinity and INT_MAX means +infinity.

        iii.    Buy and Sell stocks (Leetcode Easy level)
        iv.     Trapping rainwater (Leetcode Hard level)
